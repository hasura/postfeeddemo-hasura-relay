schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""An object with globally unique ID"""
interface Node {
  """A globally unique identifier"""
  id: ID!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "comments"
"""
type comments implements Node {
  body: String

  """An array relationship"""
  comments_likes(
    """distinct select on columns"""
    distinct_on: [comments_likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_likes_order_by!]

    """filter the rows returned"""
    where: comments_likes_bool_exp
  ): [comments_likes!]!

  """An aggregate relationship"""
  comments_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_likes_order_by!]

    """filter the rows returned"""
    where: comments_likes_bool_exp
  ): comments_likes_aggregate!

  """An array relationship connection"""
  comments_likes_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [comments_likes_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [comments_likes_order_by!]

    """filter the rows returned"""
    where: comments_likes_bool_exp
  ): comments_likesConnection!
  created_at: timestamptz!
  id: ID!

  """An object relationship"""
  post: posts!
  post_id: Int!
}

"""
A Relay connection object on "comments"
"""
type commentsConnection {
  edges: [commentsEdge!]!
  pageInfo: PageInfo!
}

type commentsEdge {
  cursor: String!
  node: comments!
}

"""
aggregated selection of "comments"
"""
type comments_aggregate {
  aggregate: comments_aggregate_fields
  nodes: [comments!]!
}

input comments_aggregate_bool_exp {
  count: comments_aggregate_bool_exp_count
}

input comments_aggregate_bool_exp_count {
  arguments: [comments_select_column!]
  distinct: Boolean
  filter: comments_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "comments"
"""
type comments_aggregate_fields {
  avg: comments_avg_fields
  count(columns: [comments_select_column!], distinct: Boolean): Int!
  max: comments_max_fields
  min: comments_min_fields
  stddev: comments_stddev_fields
  stddev_pop: comments_stddev_pop_fields
  stddev_samp: comments_stddev_samp_fields
  sum: comments_sum_fields
  var_pop: comments_var_pop_fields
  var_samp: comments_var_samp_fields
  variance: comments_variance_fields
}

"""
order by aggregate values of table "comments"
"""
input comments_aggregate_order_by {
  avg: comments_avg_order_by
  count: order_by
  max: comments_max_order_by
  min: comments_min_order_by
  stddev: comments_stddev_order_by
  stddev_pop: comments_stddev_pop_order_by
  stddev_samp: comments_stddev_samp_order_by
  sum: comments_sum_order_by
  var_pop: comments_var_pop_order_by
  var_samp: comments_var_samp_order_by
  variance: comments_variance_order_by
}

"""
input type for inserting array relation for remote table "comments"
"""
input comments_arr_rel_insert_input {
  data: [comments_insert_input!]!

  """upsert condition"""
  on_conflict: comments_on_conflict
}

"""aggregate avg on columns"""
type comments_avg_fields {
  id: Float
  post_id: Float
}

"""
order by avg() on columns of table "comments"
"""
input comments_avg_order_by {
  id: order_by
  post_id: order_by
}

"""
Boolean expression to filter rows from the table "comments". All fields are combined with a logical 'AND'.
"""
input comments_bool_exp {
  _and: [comments_bool_exp!]
  _not: comments_bool_exp
  _or: [comments_bool_exp!]
  body: String_comparison_exp
  comments_likes: comments_likes_bool_exp
  comments_likes_aggregate: comments_likes_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  post: posts_bool_exp
  post_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "comments"
"""
enum comments_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  comments_pkey
}

"""
input type for incrementing numeric columns in table "comments"
"""
input comments_inc_input {
  id: Int
  post_id: Int
}

"""
input type for inserting data into table "comments"
"""
input comments_insert_input {
  body: String
  comments_likes: comments_likes_arr_rel_insert_input
  created_at: timestamptz
  id: Int
  post: posts_obj_rel_insert_input
  post_id: Int
}

"""
columns and relationships of "comments_likes"
"""
type comments_likes implements Node {
  """An object relationship"""
  comment: comments!
  comment_id: Int!
  created_at: timestamptz!
  id: ID!

  """An object relationship"""
  user: users!
  user_id: Int!
}

"""
A Relay connection object on "comments_likes"
"""
type comments_likesConnection {
  edges: [comments_likesEdge!]!
  pageInfo: PageInfo!
}

type comments_likesEdge {
  cursor: String!
  node: comments_likes!
}

"""
aggregated selection of "comments_likes"
"""
type comments_likes_aggregate {
  aggregate: comments_likes_aggregate_fields
  nodes: [comments_likes!]!
}

input comments_likes_aggregate_bool_exp {
  count: comments_likes_aggregate_bool_exp_count
}

input comments_likes_aggregate_bool_exp_count {
  arguments: [comments_likes_select_column!]
  distinct: Boolean
  filter: comments_likes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "comments_likes"
"""
type comments_likes_aggregate_fields {
  avg: comments_likes_avg_fields
  count(columns: [comments_likes_select_column!], distinct: Boolean): Int!
  max: comments_likes_max_fields
  min: comments_likes_min_fields
  stddev: comments_likes_stddev_fields
  stddev_pop: comments_likes_stddev_pop_fields
  stddev_samp: comments_likes_stddev_samp_fields
  sum: comments_likes_sum_fields
  var_pop: comments_likes_var_pop_fields
  var_samp: comments_likes_var_samp_fields
  variance: comments_likes_variance_fields
}

"""
order by aggregate values of table "comments_likes"
"""
input comments_likes_aggregate_order_by {
  avg: comments_likes_avg_order_by
  count: order_by
  max: comments_likes_max_order_by
  min: comments_likes_min_order_by
  stddev: comments_likes_stddev_order_by
  stddev_pop: comments_likes_stddev_pop_order_by
  stddev_samp: comments_likes_stddev_samp_order_by
  sum: comments_likes_sum_order_by
  var_pop: comments_likes_var_pop_order_by
  var_samp: comments_likes_var_samp_order_by
  variance: comments_likes_variance_order_by
}

"""
input type for inserting array relation for remote table "comments_likes"
"""
input comments_likes_arr_rel_insert_input {
  data: [comments_likes_insert_input!]!

  """upsert condition"""
  on_conflict: comments_likes_on_conflict
}

"""aggregate avg on columns"""
type comments_likes_avg_fields {
  comment_id: Float
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "comments_likes"
"""
input comments_likes_avg_order_by {
  comment_id: order_by
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "comments_likes". All fields are combined with a logical 'AND'.
"""
input comments_likes_bool_exp {
  _and: [comments_likes_bool_exp!]
  _not: comments_likes_bool_exp
  _or: [comments_likes_bool_exp!]
  comment: comments_bool_exp
  comment_id: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "comments_likes"
"""
enum comments_likes_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  comments_likes_pkey
}

"""
input type for incrementing numeric columns in table "comments_likes"
"""
input comments_likes_inc_input {
  comment_id: Int
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "comments_likes"
"""
input comments_likes_insert_input {
  comment: comments_obj_rel_insert_input
  comment_id: Int
  created_at: timestamptz
  id: Int
  user: users_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type comments_likes_max_fields {
  comment_id: Int
  created_at: timestamptz
  id: Int
  user_id: Int
}

"""
order by max() on columns of table "comments_likes"
"""
input comments_likes_max_order_by {
  comment_id: order_by
  created_at: order_by
  id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type comments_likes_min_fields {
  comment_id: Int
  created_at: timestamptz
  id: Int
  user_id: Int
}

"""
order by min() on columns of table "comments_likes"
"""
input comments_likes_min_order_by {
  comment_id: order_by
  created_at: order_by
  id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "comments_likes"
"""
type comments_likes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [comments_likes!]!
}

"""
on_conflict condition type for table "comments_likes"
"""
input comments_likes_on_conflict {
  constraint: comments_likes_constraint!
  update_columns: [comments_likes_update_column!]! = []
  where: comments_likes_bool_exp
}

"""Ordering options when selecting data from "comments_likes"."""
input comments_likes_order_by {
  comment: comments_order_by
  comment_id: order_by
  created_at: order_by
  id: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: comments_likes"""
input comments_likes_pk_columns_input {
  id: Int!
}

"""
select columns of table "comments_likes"
"""
enum comments_likes_select_column {
  """column name"""
  comment_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  user_id
}

"""
input type for updating data in table "comments_likes"
"""
input comments_likes_set_input {
  comment_id: Int
  created_at: timestamptz
  id: Int
  user_id: Int
}

"""aggregate stddev on columns"""
type comments_likes_stddev_fields {
  comment_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "comments_likes"
"""
input comments_likes_stddev_order_by {
  comment_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type comments_likes_stddev_pop_fields {
  comment_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "comments_likes"
"""
input comments_likes_stddev_pop_order_by {
  comment_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type comments_likes_stddev_samp_fields {
  comment_id: Float
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "comments_likes"
"""
input comments_likes_stddev_samp_order_by {
  comment_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type comments_likes_sum_fields {
  comment_id: Int
  id: Int
  user_id: Int
}

"""
order by sum() on columns of table "comments_likes"
"""
input comments_likes_sum_order_by {
  comment_id: order_by
  id: order_by
  user_id: order_by
}

"""
update columns of table "comments_likes"
"""
enum comments_likes_update_column {
  """column name"""
  comment_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  user_id
}

input comments_likes_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: comments_likes_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: comments_likes_set_input

  """filter the rows which have to be updated"""
  where: comments_likes_bool_exp!
}

"""aggregate var_pop on columns"""
type comments_likes_var_pop_fields {
  comment_id: Float
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "comments_likes"
"""
input comments_likes_var_pop_order_by {
  comment_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type comments_likes_var_samp_fields {
  comment_id: Float
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "comments_likes"
"""
input comments_likes_var_samp_order_by {
  comment_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type comments_likes_variance_fields {
  comment_id: Float
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "comments_likes"
"""
input comments_likes_variance_order_by {
  comment_id: order_by
  id: order_by
  user_id: order_by
}

"""aggregate max on columns"""
type comments_max_fields {
  body: String
  created_at: timestamptz
  id: Int
  post_id: Int
}

"""
order by max() on columns of table "comments"
"""
input comments_max_order_by {
  body: order_by
  created_at: order_by
  id: order_by
  post_id: order_by
}

"""aggregate min on columns"""
type comments_min_fields {
  body: String
  created_at: timestamptz
  id: Int
  post_id: Int
}

"""
order by min() on columns of table "comments"
"""
input comments_min_order_by {
  body: order_by
  created_at: order_by
  id: order_by
  post_id: order_by
}

"""
response of any mutation on the table "comments"
"""
type comments_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [comments!]!
}

"""
input type for inserting object relation for remote table "comments"
"""
input comments_obj_rel_insert_input {
  data: comments_insert_input!

  """upsert condition"""
  on_conflict: comments_on_conflict
}

"""
on_conflict condition type for table "comments"
"""
input comments_on_conflict {
  constraint: comments_constraint!
  update_columns: [comments_update_column!]! = []
  where: comments_bool_exp
}

"""Ordering options when selecting data from "comments"."""
input comments_order_by {
  body: order_by
  comments_likes_aggregate: comments_likes_aggregate_order_by
  created_at: order_by
  id: order_by
  post: posts_order_by
  post_id: order_by
}

"""primary key columns input for table: comments"""
input comments_pk_columns_input {
  id: Int!
}

"""
select columns of table "comments"
"""
enum comments_select_column {
  """column name"""
  body

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  post_id
}

"""
input type for updating data in table "comments"
"""
input comments_set_input {
  body: String
  created_at: timestamptz
  id: Int
  post_id: Int
}

"""aggregate stddev on columns"""
type comments_stddev_fields {
  id: Float
  post_id: Float
}

"""
order by stddev() on columns of table "comments"
"""
input comments_stddev_order_by {
  id: order_by
  post_id: order_by
}

"""aggregate stddev_pop on columns"""
type comments_stddev_pop_fields {
  id: Float
  post_id: Float
}

"""
order by stddev_pop() on columns of table "comments"
"""
input comments_stddev_pop_order_by {
  id: order_by
  post_id: order_by
}

"""aggregate stddev_samp on columns"""
type comments_stddev_samp_fields {
  id: Float
  post_id: Float
}

"""
order by stddev_samp() on columns of table "comments"
"""
input comments_stddev_samp_order_by {
  id: order_by
  post_id: order_by
}

"""aggregate sum on columns"""
type comments_sum_fields {
  id: Int
  post_id: Int
}

"""
order by sum() on columns of table "comments"
"""
input comments_sum_order_by {
  id: order_by
  post_id: order_by
}

"""
update columns of table "comments"
"""
enum comments_update_column {
  """column name"""
  body

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  post_id
}

input comments_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: comments_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: comments_set_input

  """filter the rows which have to be updated"""
  where: comments_bool_exp!
}

"""aggregate var_pop on columns"""
type comments_var_pop_fields {
  id: Float
  post_id: Float
}

"""
order by var_pop() on columns of table "comments"
"""
input comments_var_pop_order_by {
  id: order_by
  post_id: order_by
}

"""aggregate var_samp on columns"""
type comments_var_samp_fields {
  id: Float
  post_id: Float
}

"""
order by var_samp() on columns of table "comments"
"""
input comments_var_samp_order_by {
  id: order_by
  post_id: order_by
}

"""aggregate variance on columns"""
type comments_variance_fields {
  id: Float
  post_id: Float
}

"""
order by variance() on columns of table "comments"
"""
input comments_variance_order_by {
  id: order_by
  post_id: order_by
}

"""
columns and relationships of "likes"
"""
type likes implements Node {
  created_at: timestamptz!
  id: ID!

  """An object relationship"""
  post: posts!
  post_id: Int!

  """An object relationship"""
  user: users!
  user_id: Int!
}

"""
A Relay connection object on "likes"
"""
type likesConnection {
  edges: [likesEdge!]!
  pageInfo: PageInfo!
}

type likesEdge {
  cursor: String!
  node: likes!
}

"""
aggregated selection of "likes"
"""
type likes_aggregate {
  aggregate: likes_aggregate_fields
  nodes: [likes!]!
}

input likes_aggregate_bool_exp {
  count: likes_aggregate_bool_exp_count
}

input likes_aggregate_bool_exp_count {
  arguments: [likes_select_column!]
  distinct: Boolean
  filter: likes_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "likes"
"""
type likes_aggregate_fields {
  avg: likes_avg_fields
  count(columns: [likes_select_column!], distinct: Boolean): Int!
  max: likes_max_fields
  min: likes_min_fields
  stddev: likes_stddev_fields
  stddev_pop: likes_stddev_pop_fields
  stddev_samp: likes_stddev_samp_fields
  sum: likes_sum_fields
  var_pop: likes_var_pop_fields
  var_samp: likes_var_samp_fields
  variance: likes_variance_fields
}

"""
order by aggregate values of table "likes"
"""
input likes_aggregate_order_by {
  avg: likes_avg_order_by
  count: order_by
  max: likes_max_order_by
  min: likes_min_order_by
  stddev: likes_stddev_order_by
  stddev_pop: likes_stddev_pop_order_by
  stddev_samp: likes_stddev_samp_order_by
  sum: likes_sum_order_by
  var_pop: likes_var_pop_order_by
  var_samp: likes_var_samp_order_by
  variance: likes_variance_order_by
}

"""
input type for inserting array relation for remote table "likes"
"""
input likes_arr_rel_insert_input {
  data: [likes_insert_input!]!

  """upsert condition"""
  on_conflict: likes_on_conflict
}

"""aggregate avg on columns"""
type likes_avg_fields {
  id: Float
  post_id: Float
  user_id: Float
}

"""
order by avg() on columns of table "likes"
"""
input likes_avg_order_by {
  id: order_by
  post_id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "likes". All fields are combined with a logical 'AND'.
"""
input likes_bool_exp {
  _and: [likes_bool_exp!]
  _not: likes_bool_exp
  _or: [likes_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  post: posts_bool_exp
  post_id: Int_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "likes"
"""
enum likes_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  likes_pkey
}

"""
input type for incrementing numeric columns in table "likes"
"""
input likes_inc_input {
  id: Int
  post_id: Int
  user_id: Int
}

"""
input type for inserting data into table "likes"
"""
input likes_insert_input {
  created_at: timestamptz
  id: Int
  post: posts_obj_rel_insert_input
  post_id: Int
  user: users_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type likes_max_fields {
  created_at: timestamptz
  id: Int
  post_id: Int
  user_id: Int
}

"""
order by max() on columns of table "likes"
"""
input likes_max_order_by {
  created_at: order_by
  id: order_by
  post_id: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type likes_min_fields {
  created_at: timestamptz
  id: Int
  post_id: Int
  user_id: Int
}

"""
order by min() on columns of table "likes"
"""
input likes_min_order_by {
  created_at: order_by
  id: order_by
  post_id: order_by
  user_id: order_by
}

"""
response of any mutation on the table "likes"
"""
type likes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [likes!]!
}

"""
on_conflict condition type for table "likes"
"""
input likes_on_conflict {
  constraint: likes_constraint!
  update_columns: [likes_update_column!]! = []
  where: likes_bool_exp
}

"""Ordering options when selecting data from "likes"."""
input likes_order_by {
  created_at: order_by
  id: order_by
  post: posts_order_by
  post_id: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: likes"""
input likes_pk_columns_input {
  id: Int!
}

"""
select columns of table "likes"
"""
enum likes_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  post_id

  """column name"""
  user_id
}

"""
input type for updating data in table "likes"
"""
input likes_set_input {
  created_at: timestamptz
  id: Int
  post_id: Int
  user_id: Int
}

"""aggregate stddev on columns"""
type likes_stddev_fields {
  id: Float
  post_id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "likes"
"""
input likes_stddev_order_by {
  id: order_by
  post_id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type likes_stddev_pop_fields {
  id: Float
  post_id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "likes"
"""
input likes_stddev_pop_order_by {
  id: order_by
  post_id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type likes_stddev_samp_fields {
  id: Float
  post_id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "likes"
"""
input likes_stddev_samp_order_by {
  id: order_by
  post_id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type likes_sum_fields {
  id: Int
  post_id: Int
  user_id: Int
}

"""
order by sum() on columns of table "likes"
"""
input likes_sum_order_by {
  id: order_by
  post_id: order_by
  user_id: order_by
}

"""
update columns of table "likes"
"""
enum likes_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  post_id

  """column name"""
  user_id
}

input likes_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: likes_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: likes_set_input

  """filter the rows which have to be updated"""
  where: likes_bool_exp!
}

"""aggregate var_pop on columns"""
type likes_var_pop_fields {
  id: Float
  post_id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "likes"
"""
input likes_var_pop_order_by {
  id: order_by
  post_id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type likes_var_samp_fields {
  id: Float
  post_id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "likes"
"""
input likes_var_samp_order_by {
  id: order_by
  post_id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type likes_variance_fields {
  id: Float
  post_id: Float
  user_id: Float
}

"""
order by variance() on columns of table "likes"
"""
input likes_variance_order_by {
  id: order_by
  post_id: order_by
  user_id: order_by
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "comments"
  """
  delete_comments(
    """filter the rows which have to be deleted"""
    where: comments_bool_exp!
  ): comments_mutation_response

  """
  delete single row from the table: "comments"
  """
  delete_comments_by_pk(id: Int!): comments

  """
  delete data from the table: "comments_likes"
  """
  delete_comments_likes(
    """filter the rows which have to be deleted"""
    where: comments_likes_bool_exp!
  ): comments_likes_mutation_response

  """
  delete single row from the table: "comments_likes"
  """
  delete_comments_likes_by_pk(id: Int!): comments_likes

  """
  delete data from the table: "likes"
  """
  delete_likes(
    """filter the rows which have to be deleted"""
    where: likes_bool_exp!
  ): likes_mutation_response

  """
  delete single row from the table: "likes"
  """
  delete_likes_by_pk(id: Int!): likes

  """
  delete data from the table: "posts"
  """
  delete_posts(
    """filter the rows which have to be deleted"""
    where: posts_bool_exp!
  ): posts_mutation_response

  """
  delete single row from the table: "posts"
  """
  delete_posts_by_pk(id: Int!): posts

  """
  delete data from the table: "users"
  """
  delete_users(
    """filter the rows which have to be deleted"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  delete single row from the table: "users"
  """
  delete_users_by_pk(id: Int!): users

  """
  insert data into the table: "comments"
  """
  insert_comments(
    """the rows to be inserted"""
    objects: [comments_insert_input!]!

    """upsert condition"""
    on_conflict: comments_on_conflict
  ): comments_mutation_response

  """
  insert data into the table: "comments_likes"
  """
  insert_comments_likes(
    """the rows to be inserted"""
    objects: [comments_likes_insert_input!]!

    """upsert condition"""
    on_conflict: comments_likes_on_conflict
  ): comments_likes_mutation_response

  """
  insert a single row into the table: "comments_likes"
  """
  insert_comments_likes_one(
    """the row to be inserted"""
    object: comments_likes_insert_input!

    """upsert condition"""
    on_conflict: comments_likes_on_conflict
  ): comments_likes

  """
  insert a single row into the table: "comments"
  """
  insert_comments_one(
    """the row to be inserted"""
    object: comments_insert_input!

    """upsert condition"""
    on_conflict: comments_on_conflict
  ): comments

  """
  insert data into the table: "likes"
  """
  insert_likes(
    """the rows to be inserted"""
    objects: [likes_insert_input!]!

    """upsert condition"""
    on_conflict: likes_on_conflict
  ): likes_mutation_response

  """
  insert a single row into the table: "likes"
  """
  insert_likes_one(
    """the row to be inserted"""
    object: likes_insert_input!

    """upsert condition"""
    on_conflict: likes_on_conflict
  ): likes

  """
  insert data into the table: "posts"
  """
  insert_posts(
    """the rows to be inserted"""
    objects: [posts_insert_input!]!

    """upsert condition"""
    on_conflict: posts_on_conflict
  ): posts_mutation_response

  """
  insert a single row into the table: "posts"
  """
  insert_posts_one(
    """the row to be inserted"""
    object: posts_insert_input!

    """upsert condition"""
    on_conflict: posts_on_conflict
  ): posts

  """
  insert data into the table: "users"
  """
  insert_users(
    """the rows to be inserted"""
    objects: [users_insert_input!]!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users_mutation_response

  """
  insert a single row into the table: "users"
  """
  insert_users_one(
    """the row to be inserted"""
    object: users_insert_input!

    """upsert condition"""
    on_conflict: users_on_conflict
  ): users

  """
  update data of the table: "comments"
  """
  update_comments(
    """increments the numeric columns with given value of the filtered values"""
    _inc: comments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comments_set_input

    """filter the rows which have to be updated"""
    where: comments_bool_exp!
  ): comments_mutation_response

  """
  update single row of the table: "comments"
  """
  update_comments_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: comments_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comments_set_input
    pk_columns: comments_pk_columns_input!
  ): comments

  """
  update data of the table: "comments_likes"
  """
  update_comments_likes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: comments_likes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comments_likes_set_input

    """filter the rows which have to be updated"""
    where: comments_likes_bool_exp!
  ): comments_likes_mutation_response

  """
  update single row of the table: "comments_likes"
  """
  update_comments_likes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: comments_likes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: comments_likes_set_input
    pk_columns: comments_likes_pk_columns_input!
  ): comments_likes

  """
  update multiples rows of table: "comments_likes"
  """
  update_comments_likes_many(
    """updates to execute, in order"""
    updates: [comments_likes_updates!]!
  ): [comments_likes_mutation_response]

  """
  update multiples rows of table: "comments"
  """
  update_comments_many(
    """updates to execute, in order"""
    updates: [comments_updates!]!
  ): [comments_mutation_response]

  """
  update data of the table: "likes"
  """
  update_likes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: likes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: likes_set_input

    """filter the rows which have to be updated"""
    where: likes_bool_exp!
  ): likes_mutation_response

  """
  update single row of the table: "likes"
  """
  update_likes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: likes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: likes_set_input
    pk_columns: likes_pk_columns_input!
  ): likes

  """
  update multiples rows of table: "likes"
  """
  update_likes_many(
    """updates to execute, in order"""
    updates: [likes_updates!]!
  ): [likes_mutation_response]

  """
  update data of the table: "posts"
  """
  update_posts(
    """increments the numeric columns with given value of the filtered values"""
    _inc: posts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: posts_set_input

    """filter the rows which have to be updated"""
    where: posts_bool_exp!
  ): posts_mutation_response

  """
  update single row of the table: "posts"
  """
  update_posts_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: posts_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: posts_set_input
    pk_columns: posts_pk_columns_input!
  ): posts

  """
  update multiples rows of table: "posts"
  """
  update_posts_many(
    """updates to execute, in order"""
    updates: [posts_updates!]!
  ): [posts_mutation_response]

  """
  update data of the table: "users"
  """
  update_users(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input

    """filter the rows which have to be updated"""
    where: users_bool_exp!
  ): users_mutation_response

  """
  update single row of the table: "users"
  """
  update_users_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: users_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: users_set_input
    pk_columns: users_pk_columns_input!
  ): users

  """
  update multiples rows of table: "users"
  """
  update_users_many(
    """updates to execute, in order"""
    updates: [users_updates!]!
  ): [users_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "posts"
"""
type posts implements Node {
  body: String

  """An array relationship"""
  comments(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): [comments!]!

  """An aggregate relationship"""
  comments_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): comments_aggregate!

  """An array relationship connection"""
  comments_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [comments_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): commentsConnection!
  created_at: timestamptz!
  id: ID!

  """An array relationship"""
  likes(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): [likes!]!

  """An aggregate relationship"""
  likes_aggregate(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): likes_aggregate!

  """An array relationship connection"""
  likes_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [likes_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): likesConnection!
  starred: Boolean!
  title: String!

  """An object relationship"""
  user: users!
  user_id: Int!
}

"""
A Relay connection object on "posts"
"""
type postsConnection {
  edges: [postsEdge!]!
  pageInfo: PageInfo!
}

type postsEdge {
  cursor: String!
  node: posts!
}

"""
aggregated selection of "posts"
"""
type posts_aggregate {
  aggregate: posts_aggregate_fields
  nodes: [posts!]!
}

input posts_aggregate_bool_exp {
  bool_and: posts_aggregate_bool_exp_bool_and
  bool_or: posts_aggregate_bool_exp_bool_or
  count: posts_aggregate_bool_exp_count
}

input posts_aggregate_bool_exp_bool_and {
  arguments: posts_select_column_posts_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: posts_bool_exp
  predicate: Boolean_comparison_exp!
}

input posts_aggregate_bool_exp_bool_or {
  arguments: posts_select_column_posts_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: posts_bool_exp
  predicate: Boolean_comparison_exp!
}

input posts_aggregate_bool_exp_count {
  arguments: [posts_select_column!]
  distinct: Boolean
  filter: posts_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "posts"
"""
type posts_aggregate_fields {
  avg: posts_avg_fields
  count(columns: [posts_select_column!], distinct: Boolean): Int!
  max: posts_max_fields
  min: posts_min_fields
  stddev: posts_stddev_fields
  stddev_pop: posts_stddev_pop_fields
  stddev_samp: posts_stddev_samp_fields
  sum: posts_sum_fields
  var_pop: posts_var_pop_fields
  var_samp: posts_var_samp_fields
  variance: posts_variance_fields
}

"""
order by aggregate values of table "posts"
"""
input posts_aggregate_order_by {
  avg: posts_avg_order_by
  count: order_by
  max: posts_max_order_by
  min: posts_min_order_by
  stddev: posts_stddev_order_by
  stddev_pop: posts_stddev_pop_order_by
  stddev_samp: posts_stddev_samp_order_by
  sum: posts_sum_order_by
  var_pop: posts_var_pop_order_by
  var_samp: posts_var_samp_order_by
  variance: posts_variance_order_by
}

"""
input type for inserting array relation for remote table "posts"
"""
input posts_arr_rel_insert_input {
  data: [posts_insert_input!]!

  """upsert condition"""
  on_conflict: posts_on_conflict
}

"""aggregate avg on columns"""
type posts_avg_fields {
  id: Float
  user_id: Float
}

"""
order by avg() on columns of table "posts"
"""
input posts_avg_order_by {
  id: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "posts". All fields are combined with a logical 'AND'.
"""
input posts_bool_exp {
  _and: [posts_bool_exp!]
  _not: posts_bool_exp
  _or: [posts_bool_exp!]
  body: String_comparison_exp
  comments: comments_bool_exp
  comments_aggregate: comments_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  likes: likes_bool_exp
  likes_aggregate: likes_aggregate_bool_exp
  starred: Boolean_comparison_exp
  title: String_comparison_exp
  user: users_bool_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "posts"
"""
enum posts_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  posts_pkey
}

"""
input type for incrementing numeric columns in table "posts"
"""
input posts_inc_input {
  id: Int
  user_id: Int
}

"""
input type for inserting data into table "posts"
"""
input posts_insert_input {
  body: String
  comments: comments_arr_rel_insert_input
  created_at: timestamptz
  id: Int
  likes: likes_arr_rel_insert_input
  starred: Boolean
  title: String
  user: users_obj_rel_insert_input
  user_id: Int
}

"""aggregate max on columns"""
type posts_max_fields {
  body: String
  created_at: timestamptz
  id: Int
  title: String
  user_id: Int
}

"""
order by max() on columns of table "posts"
"""
input posts_max_order_by {
  body: order_by
  created_at: order_by
  id: order_by
  title: order_by
  user_id: order_by
}

"""aggregate min on columns"""
type posts_min_fields {
  body: String
  created_at: timestamptz
  id: Int
  title: String
  user_id: Int
}

"""
order by min() on columns of table "posts"
"""
input posts_min_order_by {
  body: order_by
  created_at: order_by
  id: order_by
  title: order_by
  user_id: order_by
}

"""
response of any mutation on the table "posts"
"""
type posts_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [posts!]!
}

"""
input type for inserting object relation for remote table "posts"
"""
input posts_obj_rel_insert_input {
  data: posts_insert_input!

  """upsert condition"""
  on_conflict: posts_on_conflict
}

"""
on_conflict condition type for table "posts"
"""
input posts_on_conflict {
  constraint: posts_constraint!
  update_columns: [posts_update_column!]! = []
  where: posts_bool_exp
}

"""Ordering options when selecting data from "posts"."""
input posts_order_by {
  body: order_by
  comments_aggregate: comments_aggregate_order_by
  created_at: order_by
  id: order_by
  likes_aggregate: likes_aggregate_order_by
  starred: order_by
  title: order_by
  user: users_order_by
  user_id: order_by
}

"""primary key columns input for table: posts"""
input posts_pk_columns_input {
  id: Int!
}

"""
select columns of table "posts"
"""
enum posts_select_column {
  """column name"""
  body

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  starred

  """column name"""
  title

  """column name"""
  user_id
}

"""
select "posts_aggregate_bool_exp_bool_and_arguments_columns" columns of table "posts"
"""
enum posts_select_column_posts_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  starred
}

"""
select "posts_aggregate_bool_exp_bool_or_arguments_columns" columns of table "posts"
"""
enum posts_select_column_posts_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  starred
}

"""
input type for updating data in table "posts"
"""
input posts_set_input {
  body: String
  created_at: timestamptz
  id: Int
  starred: Boolean
  title: String
  user_id: Int
}

"""aggregate stddev on columns"""
type posts_stddev_fields {
  id: Float
  user_id: Float
}

"""
order by stddev() on columns of table "posts"
"""
input posts_stddev_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate stddev_pop on columns"""
type posts_stddev_pop_fields {
  id: Float
  user_id: Float
}

"""
order by stddev_pop() on columns of table "posts"
"""
input posts_stddev_pop_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate stddev_samp on columns"""
type posts_stddev_samp_fields {
  id: Float
  user_id: Float
}

"""
order by stddev_samp() on columns of table "posts"
"""
input posts_stddev_samp_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate sum on columns"""
type posts_sum_fields {
  id: Int
  user_id: Int
}

"""
order by sum() on columns of table "posts"
"""
input posts_sum_order_by {
  id: order_by
  user_id: order_by
}

"""
update columns of table "posts"
"""
enum posts_update_column {
  """column name"""
  body

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  starred

  """column name"""
  title

  """column name"""
  user_id
}

input posts_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: posts_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: posts_set_input

  """filter the rows which have to be updated"""
  where: posts_bool_exp!
}

"""aggregate var_pop on columns"""
type posts_var_pop_fields {
  id: Float
  user_id: Float
}

"""
order by var_pop() on columns of table "posts"
"""
input posts_var_pop_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate var_samp on columns"""
type posts_var_samp_fields {
  id: Float
  user_id: Float
}

"""
order by var_samp() on columns of table "posts"
"""
input posts_var_samp_order_by {
  id: order_by
  user_id: order_by
}

"""aggregate variance on columns"""
type posts_variance_fields {
  id: Float
  user_id: Float
}

"""
order by variance() on columns of table "posts"
"""
input posts_variance_order_by {
  id: order_by
  user_id: order_by
}

type query_root {
  """An array relationship connection"""
  comments_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [comments_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): commentsConnection!

  """An array relationship connection"""
  comments_likes_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [comments_likes_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [comments_likes_order_by!]

    """filter the rows returned"""
    where: comments_likes_bool_exp
  ): comments_likesConnection!

  """An array relationship connection"""
  likes_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [likes_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): likesConnection!
  node(
    """A globally unique id"""
    id: ID!
  ): Node

  """An array relationship connection"""
  posts_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [posts_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): postsConnection!

  """
  fetch data from the table: "users"
  """
  users_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [users_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): usersConnection!
}

type subscription_root {
  """An array relationship connection"""
  comments_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [comments_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [comments_order_by!]

    """filter the rows returned"""
    where: comments_bool_exp
  ): commentsConnection!

  """An array relationship connection"""
  comments_likes_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [comments_likes_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [comments_likes_order_by!]

    """filter the rows returned"""
    where: comments_likes_bool_exp
  ): comments_likesConnection!

  """An array relationship connection"""
  likes_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [likes_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): likesConnection!
  node(
    """A globally unique id"""
    id: ID!
  ): Node

  """An array relationship connection"""
  posts_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [posts_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): postsConnection!

  """
  fetch data from the table: "users"
  """
  users_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [users_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [users_order_by!]

    """filter the rows returned"""
    where: users_bool_exp
  ): usersConnection!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type users implements Node {
  """An array relationship"""
  comments_likes(
    """distinct select on columns"""
    distinct_on: [comments_likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_likes_order_by!]

    """filter the rows returned"""
    where: comments_likes_bool_exp
  ): [comments_likes!]!

  """An aggregate relationship"""
  comments_likes_aggregate(
    """distinct select on columns"""
    distinct_on: [comments_likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [comments_likes_order_by!]

    """filter the rows returned"""
    where: comments_likes_bool_exp
  ): comments_likes_aggregate!

  """An array relationship connection"""
  comments_likes_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [comments_likes_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [comments_likes_order_by!]

    """filter the rows returned"""
    where: comments_likes_bool_exp
  ): comments_likesConnection!
  created_at: timestamptz!
  id: ID!

  """An array relationship"""
  likes(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): [likes!]!

  """An aggregate relationship"""
  likes_aggregate(
    """distinct select on columns"""
    distinct_on: [likes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): likes_aggregate!

  """An array relationship connection"""
  likes_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [likes_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [likes_order_by!]

    """filter the rows returned"""
    where: likes_bool_exp
  ): likesConnection!
  name: String

  """An array relationship"""
  posts(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): [posts!]!

  """An aggregate relationship"""
  posts_aggregate(
    """distinct select on columns"""
    distinct_on: [posts_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): posts_aggregate!

  """An array relationship connection"""
  posts_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [posts_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [posts_order_by!]

    """filter the rows returned"""
    where: posts_bool_exp
  ): postsConnection!
}

"""
A Relay connection object on "users"
"""
type usersConnection {
  edges: [usersEdge!]!
  pageInfo: PageInfo!
}

type usersEdge {
  cursor: String!
  node: users!
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input users_bool_exp {
  _and: [users_bool_exp!]
  _not: users_bool_exp
  _or: [users_bool_exp!]
  comments_likes: comments_likes_bool_exp
  comments_likes_aggregate: comments_likes_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  likes: likes_bool_exp
  likes_aggregate: likes_aggregate_bool_exp
  name: String_comparison_exp
  posts: posts_bool_exp
  posts_aggregate: posts_aggregate_bool_exp
}

"""
unique or primary key constraints on table "users"
"""
enum users_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for incrementing numeric columns in table "users"
"""
input users_inc_input {
  id: Int
}

"""
input type for inserting data into table "users"
"""
input users_insert_input {
  comments_likes: comments_likes_arr_rel_insert_input
  created_at: timestamptz
  id: Int
  likes: likes_arr_rel_insert_input
  name: String
  posts: posts_arr_rel_insert_input
}

"""
response of any mutation on the table "users"
"""
type users_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [users!]!
}

"""
input type for inserting object relation for remote table "users"
"""
input users_obj_rel_insert_input {
  data: users_insert_input!

  """upsert condition"""
  on_conflict: users_on_conflict
}

"""
on_conflict condition type for table "users"
"""
input users_on_conflict {
  constraint: users_constraint!
  update_columns: [users_update_column!]! = []
  where: users_bool_exp
}

"""Ordering options when selecting data from "users"."""
input users_order_by {
  comments_likes_aggregate: comments_likes_aggregate_order_by
  created_at: order_by
  id: order_by
  likes_aggregate: likes_aggregate_order_by
  name: order_by
  posts_aggregate: posts_aggregate_order_by
}

"""primary key columns input for table: users"""
input users_pk_columns_input {
  id: Int!
}

"""
select columns of table "users"
"""
enum users_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "users"
"""
input users_set_input {
  created_at: timestamptz
  id: Int
  name: String
}

"""
update columns of table "users"
"""
enum users_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name
}

input users_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: users_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: users_set_input

  """filter the rows which have to be updated"""
  where: users_bool_exp!
}

